3-D Calibration Visualisation {#tutorial_py_multicam_vis}
=========================================================

Goal
----
After calibrating one or more cameras, you often want to check extrinsics, look at reprojection errors, and see how cameras are placed relative to the calibration board.

The script `multicam_vis.py` is an interactive tool for inspecting calibration results in 3-D.
It takes YAML files generated by the C++ sample `samples/cpp/calibration.cpp` or the Python sample `samples/python/multiview_calibration.py`, draws the calibration board with camera frustums, and can export the scene as an OBJ/MTL pair.

**Source:** `samples/python/multicam_vis.py`

Why use it?
-----------
Calibration produces:
- **Intrinsics** – focal lengths and principal point
- **Extrinsics** – rotation and translation for each view

By plotting extrinsics you can:
- See where the board was relative to the camera
- Spot outliers that don’t fit
- Confirm your dataset covers a range of viewpoints

The script also plots per-view reprojection errors, so you can see which frames may be reducing accuracy.

Inputs
------
The viewer expects one or more YAML calibration files containing:
- **per_view_reprojection_errors** – RMS error for each image
- **extrinsic_parameters** – `N×6` matrix, each row = Rodrigues rotation + translation
- **grid_points** – 3-D object points of the pattern
- **camera_matrix** – 3×3 intrinsic matrix
- **image_width, image_height** – image size

If multiple YAMLs are provided (one per camera), the script shows all cameras around a common board.

Command-line options
--------------------
@code{.text}
calib_files            One or more YAMLs with calibration data

--view {camera|board}  View mode:
                         camera = board relative to one camera
                         board  = all cameras around the board
                         (default: camera view if one file,
                                   board view otherwise)

--export <string>      Export as BASE.obj / BASE.mtl

--no-gui               Skip the interactive window; just export

--max-frustums <int>   Limit frustums per camera (board view only)
@endcode

Example: single camera
----------------------
Suppose you calibrated a single camera with `samples/cpp/calibration.cpp` and saved `cam1_calib.yaml`.
Running `multicam_vis.py` loads this file, plots the per-view reprojection RMS errors, and shows a 3-D view of the board grids and the camera frustum.

@code{.bash}
python3 multicam_vis.py calibration_output/cam1_calib.yaml --view camera
@endcode

Interactive features:
- **Left panel (errors):**
  Each bar is a frame’s RMS error. Click a bar to highlight its 3-D pose.
  Clicking a board in 3-D highlights its bar.
  Dragging a vertical span selects a range of errors and highlights all poses in that range.

- **Right panel (3-D view):**
  Detected board grids are drawn at their estimated poses, each labelled with its index.
  The camera frustum is drawn with axes: **Xc** (red), **Yc** (green), **Zc** (blue).
  Units are in millimetres from the calibration input.

Demo results:

- Interactive 3-D reprojection view:

  ![single camera vis](doc/py_tutorials/py_calib3d/py_multicam_tools/assets/multicam_vis/single_vis_res_1.gif)

- Range selection of error bars ↔ detected grids:

  ![bar selection](doc/py_tutorials/py_calib3d/py_multicam_tools/assets/multicam_vis/single_vis_res_2.gif)

Exporting to OBJ/MTL
--------------------
You can also export the scene and inspect it in MeshLab or any other 3-D viewer.

@code{.bash}
python3 multicam_vis.py cam1_calib.yml --view camera --export scene_single
@endcode

Result in MeshLab:

![meshlab single camera](doc/py_tutorials/py_calib3d/py_multicam_tools/assets/multicam_vis/single_camera_meshlab.gif)

Generated files:

- `assets/multicam_vis/scene_single.obj`
- `assets/multicam_vis/scene_single.mtl`

Example: multi-camera
---------------------
If you have several cameras calibrated (one YAML per camera),
`multicam_vis.py` can show them all around a common board.

@code{.bash}
python3 multicam_vis.py cam1_calib.yml cam2_calib.yml cam3_calib.yml cam4_calib.yml cam5_calib.yml cam6_calib.yml \
    --view board --max-frustums 1 --export scene_multi
@endcode

Features:
- **Errors (left):** one bar per frame; click or drag to highlight poses.
- **3-D view (right):** board fixed, each camera frustum in a different colour and labelled.
- Axes relative to board: **Xb** (red), **Yb** (green), **Zb** (blue).

Demo results:

![multi camera vis](doc/py_tutorials/py_calib3d/py_multicam_tools/assets/multicam_vis/multi_vis_res.gif)

Generated files:
- `assets/multicam_vis/scene_multi.obj`
- `assets/multicam_vis/scene_multi.mtl`

Summary
-------
`multicam_vis.py` helps you inspect calibration results interactively. It:
- Loads YAMLs with intrinsics, extrinsics, reprojection errors, and object points
- Links error bars ↔ detected boards in 3-D
- Draws the calibration board and camera frustums
- Exports to OBJ/MTL for MeshLab or other 3-D tools

Exported assets (kept under `assets/multicam_vis/` in this tutorial):
- Single camera: `scene_single.obj`, `scene_single.mtl`
- Multi-camera: `scene_multi.obj`, `scene_multi.mtl`

This makes it easy to spot bad frames, check coverage, confirm extrinsics, and use the results for stereo or 3-D reconstruction.

See also
--------
- [Camera Calibration](#tutorial_py_calibration)
- [Multi-camera Image Selection](#tutorial_py_multicam_image_selector)
