{
    "ManualFuncs" : {
        "QRCodeEncoder" : {
            "QRCodeEncoder" : {
                "j_code"   : [
                    "\n",
                    "/**",
                    " * Constructor of streaming callback object with abstract 'read' and 'seek' methods that should be implemented in Java code.<br>",
                    " * <b>NOTE</b>: Implemented callbacks should be called from the creation thread to avoid JNI performance degradation",
                    "*/",
                    "public void encode(byte[] encoded_info, Mat qrcode) {",
                    "    encode_1(nativeObj, encoded_info, qrcode.nativeObj);",
                    "}",
                    "\n"
                ],
                "jn_code": [
                    "\n",
                    "private static native void encode_1(long nativeObj, byte[] encoded_info, long qrcode_nativeObj);",
                    "\n"
                ],
                "cpp_code": [
                    "//",
                    "//  void cv::QRCodeEncoder::encode(String encoded_info, Mat& qrcode)",
                    "//",
                    "\n",
                    "JNIEXPORT void JNICALL Java_org_opencv_objdetect_QRCodeEncoder_encode_11 (JNIEnv*, jclass, jlong, jbyteArray, jlong);",
                    "\n",
                    "JNIEXPORT void JNICALL Java_org_opencv_objdetect_QRCodeEncoder_encode_11",
                    "(JNIEnv* env, jclass , jlong self, jbyteArray encoded_info, jlong qrcode_nativeObj)",
                    "{",
                    "",
                    "    static const char method_name[] = \"objdetect::encode_11()\";",
                    "    try {",
                    "        LOGD(\"%s\", method_name);",
                    "        Ptr<cv::QRCodeEncoder>* me = (Ptr<cv::QRCodeEncoder>*) self; //TODO: check for NULL",
                    "        const char* n_encoded_info = reinterpret_cast<char*>(env->GetByteArrayElements(encoded_info, NULL));",
                    "        Mat& qrcode = *((Mat*)qrcode_nativeObj);",
                    "        (*me)->encode( n_encoded_info, qrcode );",
                    "    } catch(const std::exception &e) {",
                    "        throwJavaException(env, &e, method_name);",
                    "    } catch (...) {",
                    "        throwJavaException(env, 0, method_name);",
                    "    }",
                    "}",
                    "\n"
                ]
            }
        },
        "GraphicalCodeDetector" : {
            "GraphicalCodeDetector" : {
                "j_code"   : [
                    "\n",
                    "public byte[] detectAndDecodeBytes(Mat img) {",
                    "    return detectAndDecodeBytes_0(nativeObj, img.nativeObj);",
                    "}",
                    "\n"
                ],
                "jn_code": [
                    "\n",
                    "private static native byte[] detectAndDecodeBytes_0(long nativeObj, long img_nativeObj);",
                    "\n"
                ],
                "cpp_code": [
                    "JNIEXPORT jbyteArray JNICALL Java_org_opencv_objdetect_GraphicalCodeDetector_detectAndDecodeBytes_10 (JNIEnv*, jclass, jlong, jlong);",
                    "\n",
                    "JNIEXPORT jbyteArray JNICALL Java_org_opencv_objdetect_GraphicalCodeDetector_detectAndDecodeBytes_10",
                    "  (JNIEnv* env, jclass , jlong self, jlong img_nativeObj)",
                    "{",
                    "    ",
                    "    static const char method_name[] = \"objdetect::detectAndDecodeBytes_10()\";",
                    "    try {",
                    "        LOGD(\"%s\", method_name);",
                    "        cv::GraphicalCodeDetector* me = (cv::GraphicalCodeDetector*) self; //TODO: check for NULL",
                    "        Mat& img = *((Mat*)img_nativeObj);",
                    "        std::string result = me->detectAndDecode( img );",
                    "        jsize sz = result.size();",
                    "        jbyteArray _retval_ = env->NewByteArray(static_cast<jsize>(sz));",
                    "        env->SetByteArrayRegion(_retval_, 0, sz, reinterpret_cast<jbyte*>(&result[0]));",
                    "        return _retval_;",
                    "    } catch(const std::exception &e) {",
                    "        throwJavaException(env, &e, method_name);",
                    "    } catch (...) {",
                    "        throwJavaException(env, 0, method_name);",
                    "    }",
                    "    return 0;",
                    "}",
                    "\n"
                ]
            }
        }
    }
}
