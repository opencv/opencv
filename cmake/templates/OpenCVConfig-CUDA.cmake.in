# Version Compute Capability from which OpenCV has been compiled is remembered
option(OpenCV_REQUIRE_CUDA_MINOR_EXACT "Require match the exact cuda minor version to link against produced libraries." ON)
option(OpenCV_ALLOW_CUDA_MINOR_OLDER "Allow newer cuda minor version to link against produced libraries." OFF)

set(OpenCV_COMPUTE_CAPABILITIES "@OpenCV_CUDA_CC@")

set(OpenCV_CUDA_VERSION "@CUDA_VERSION_STRING@")
set(OpenCV_USE_CUBLAS   "@HAVE_CUBLAS@")
set(OpenCV_USE_CUFFT    "@HAVE_CUFFT@")
set(OpenCV_USE_NVCUVID  "@HAVE_NVCUVID@")
set(OpenCV_USE_NVCUVENC "@HAVE_NVCUVENC@")
set(OpenCV_CUDNN_VERSION    "@CUDNN_VERSION@")
set(OpenCV_USE_CUDNN        "@HAVE_CUDNN@")
set(OpenCV_ENABLE_CUDA_FIRST_CLASS_LANGUAGE "@ENABLE_CUDA_FIRST_CLASS_LANGUAGE@")

# Function to calculate the version range based on match_minor flag
function(ocv_get_version_range version_expected match_minor allow_older lower_bound upper_bound ver_target)
  # Split the version into components
  string(REPLACE "." ";" version_list ${version_expected})
  list(LENGTH version_list version_length)

  # Extract major and minor components
  list(GET version_list 0 major)
  if(version_length GREATER 1)
    list(GET version_list 1 minor)
  else()
    set(minor 0)  # Default minor to 0 if not provided
  endif()

  # Determine the range based on match_minor flag
  if(match_minor)
    # Match minor: range is [major.minor, major.<minor + 1>)
    math(EXPR new_minor "${minor} + 1")
    set(${lower_bound} "${major}.${minor}" PARENT_SCOPE)
    set(${upper_bound} "${major}.${new_minor}" PARENT_SCOPE)
    set(${ver_target} "${major}.${minor}" PARENT_SCOPE)
  else()
    if(allow_older)
      # Do not match minor: range is [major, <major + 1>)
      set(${lower_bound} "${major}" PARENT_SCOPE)
    else()
      # backward compatible match minor: range is [major.minor, <major + 1>)
      set(${lower_bound} "${major}.${minor}" PARENT_SCOPE)
    endif()
    set(${ver_target} "${major}" PARENT_SCOPE)
    math(EXPR new_major "${major} + 1")
    set(${upper_bound} "${new_major}" PARENT_SCOPE)
  endif()
endfunction()

function(ocv_check_cuda_version_range version_detected ver_min ver_max)
  # message("version=${version_detected} ${ver_min} ${ver_max}")
  if(version_detected VERSION_GREATER_EQUAL ver_max OR version_detected VERSION_LESS ver_min)
    message(FATAL_ERROR "OpenCV library was compiled with CUDA ${OpenCV_CUDA_VERSION} support. Please, use the version >=${ver_min} <${ver_max} or rebuild OpenCV with CUDA ${version_detected}")
  endif()
endfunction()

ocv_get_version_range(${OpenCV_CUDA_VERSION} ${OpenCV_REQUIRE_CUDA_MINOR_EXACT} ${OpenCV_ALLOW_CUDA_MINOR_OLDER} OpenCV_CUDA_VERSION_MIN OpenCV_CUDA_VERSION_MAX OpenCV_CUDA_VERSION_TARGET)

# message("version_expected=${OpenCV_CUDA_VERSION} OpenCV_REQUIRE_CUDA_MINOR_EXACT=${OpenCV_REQUIRE_CUDA_MINOR_EXACT} OpenCV_ALLOW_CUDA_MINOR_OLDER=${OpenCV_ALLOW_CUDA_MINOR_OLDER}")

if(OpenCV_ENABLE_CUDA_FIRST_CLASS_LANGUAGE)
  if(NOT CUDAToolkit_FOUND)
    if(NOT CMAKE_VERSION VERSION_LESS 3.18)
      if(UNIX AND NOT CMAKE_CUDA_COMPILER AND NOT CUDAToolkit_ROOT)
        message(STATUS "Checking for CUDAToolkit in default location (/usr/local/cuda)")
        set(CUDA_PATH "/usr/local/cuda" CACHE INTERNAL "")
        set(ENV{CUDA_PATH} ${CUDA_PATH})
      endif()
      find_package(CUDAToolkit ${OpenCV_CUDA_VERSION_TARGET} EXACT REQUIRED)
    else()
      message(FATAL_ERROR "Using OpenCV compiled with CUDA as first class language requires CMake \>= 3.18.")
    endif()
  endif()
  if(CUDAToolkit_FOUND)
    set(CUDA_VERSION_STRING ${CUDAToolkit_VERSION})
  endif()
  ocv_check_cuda_version_range(${CUDA_VERSION_STRING} ${OpenCV_CUDA_VERSION_MIN} ${OpenCV_CUDA_VERSION_MAX})
else(OpenCV_ENABLE_CUDA_FIRST_CLASS_LANGUAGE)
  if(NOT CUDA_FOUND)
    find_host_package(CUDA ${OpenCV_CUDA_VERSION_TARGET} EXACT REQUIRED)
  endif()
  ocv_check_cuda_version_range(${CUDA_VERSION_STRING} ${OpenCV_CUDA_VERSION_MIN} ${OpenCV_CUDA_VERSION_MAX})

  set(OpenCV_CUDA_LIBS_ABSPATH ${CUDA_LIBRARIES})

  if(CUDA_VERSION VERSION_LESS "5.5")
    list(APPEND OpenCV_CUDA_LIBS_ABSPATH ${CUDA_npp_LIBRARY})
  else()
    find_cuda_helper_libs(nppc)
    find_cuda_helper_libs(nppi)
    find_cuda_helper_libs(npps)
    list(APPEND OpenCV_CUDA_LIBS_ABSPATH ${CUDA_nppc_LIBRARY} ${CUDA_nppi_LIBRARY} ${CUDA_npps_LIBRARY})
  endif()

  if(OpenCV_USE_CUBLAS)
    list(APPEND OpenCV_CUDA_LIBS_ABSPATH ${CUDA_CUBLAS_LIBRARIES})
  endif()

  if(OpenCV_USE_CUFFT)
    list(APPEND OpenCV_CUDA_LIBS_ABSPATH ${CUDA_CUFFT_LIBRARIES})
  endif()

  set(OpenCV_CUDA_LIBS_RELPATH "")
  foreach(l ${OpenCV_CUDA_LIBS_ABSPATH})
    get_filename_component(_tmp ${l} PATH)
    if(NOT ${_tmp} MATCHES "-Wl.*")
      list(APPEND OpenCV_CUDA_LIBS_RELPATH ${_tmp})
    endif()
  endforeach()

  list(REMOVE_DUPLICATES OpenCV_CUDA_LIBS_RELPATH)
  link_directories(${OpenCV_CUDA_LIBS_RELPATH})
endif(OpenCV_ENABLE_CUDA_FIRST_CLASS_LANGUAGE)
